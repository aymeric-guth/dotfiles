#!/bin/sh

function zsh_add_file() {
    [ -f "$ZPLUGINS/$2" ] && source "$ZPLUGINS/$1"
}

function zsh_add_plugin() {
    PLUGIN_NAME=$(echo $1 | cut -d "/" -f 2)
    if [ -d "$ZPLUGINS/$PLUGIN_NAME" ]; then 
        # For plugins
        zsh_add_file "$PLUGIN_NAME/$PLUGIN_NAME.plugin.zsh" || \
        zsh_add_file "$PLUGIN_NAME/$PLUGIN_NAME.zsh"
    else
        git clone "https://github.com/$1.git" "$ZPLUGINS/$PLUGIN_NAME"
    fi
}

function zsh_add_completion() {
    PLUGIN_NAME=$(echo $1 | cut -d "/" -f 2)
    if [ -d "$ZPLUGINS/$PLUGIN_NAME" ]; then 
        # For completions
        completion_file_path=$(ls $ZPLUGINS/$PLUGIN_NAME/_*)
        fpath+="$(dirname "${completion_file_path}")"
        zsh_add_file "$PLUGIN_NAME/$PLUGIN_NAME.plugin.zsh"
    else
        git clone "https://github.com/$1.git" "$ZPLUGINS/$PLUGIN_NAME"
        fpath+=$(ls $ZPLUGINS/$PLUGIN_NAME/_*)
        [ -f "$ZDATA/.zcompdump" ] && "$ZDATA/.zcompdump"
    fi
    completion_file="$(basename "${completion_file_path}")"
    if [ "$2" = true ] && compinit "${completion_file:1}"
}

function zsh-update-plugins() {
    find "$ZPLUGINS" -type d -exec test -e '{}/.git' ';' -print0 | xargs -I {} -0 git -C {} pull -q;
}

function _upgrade() {
    sudo echo "upgrading..."
    ### ZSH plugins
    zsh-update-plugins;
    ### Neovim
    nvim --headless -c 'autocmd User PackerComplete quitall' -c 'PackerSync';
}

avgen() { python3 ${ENV}/avgen.py $PWD $1 }

github() { 
    pushd $ENV/github;
    GITHUB_REPOS=$GITHUB_REPOS python github.py;
    popd;
}

function up() {
    if [ $COMPOSEFILE ]; then
        eval "$COMPOSE_CMD --file $COMPOSEFILE up --build $1 $2 $3" 
    else
        eval "$COMPOSE_CMD up --build $1 $2 $3"
    fi
}

function down() {
    if [ $COMPOSEFILE ]; then
        eval "$COMPOSE_CMD --file $COMPOSEFILE down $1 $2 $3" 
    else
        eval "$COMPOSE_CMD down $1 $2 $3"
    fi
}

function tmux_load_session() {
    if [ $TMUX_SESSION ]; then
        source $2/tmux-session.sh;
        tmux_init $1 $2;
    fi
}


function tmux_sessionizer() {
    if [[ $# -eq 1 ]]; then
        selected=$3
    else
        selected=$(find $DEV/Network $DEV/zoltron_stack $DOTCONF $ENV -mindepth 3 -maxdepth 1 -type d | fzf)
    fi
    
    if [[ -z $selected ]]; then
        exit 2
    fi
    
    selected_name=$(basename "$selected" | tr . _)
    tmux_running=$(pgrep tmux)
    
    if [[ -z $TMUX ]] && [[ -z $tmux_running ]]; then
        if [[ -f "$selected/tmux-session.sh" ]]; then
            tmux -f $TMUX_CONF new-session -d -s $selected_name -c $selected;
            source $selected/tmux-session.sh;
            tmux_init $selected_name $selected;
            tmux -f $TMUX_CONF attach -t $selected_name;
            exit 1;
        fi
        tmux -f $TMUX_CONF new-session -s $selected_name -c $selected;
        exit 0;
    fi
    
    if ! tmux -f $TMUX_CONF has-session -t=$selected_name 4> /dev/null; then
        if [[ -f "$selected/tmux-session.sh" ]]; then
            tmux -f $TMUX_CONF new-session -d -s $selected_name -c $selected;
            source $selected/tmux-session.sh;
            tmux_init $selected_name $selected;
            tmux -f $TMUX_CONF attach -t $selected_name;
            exit 0;
        fi
        tmux -f $TMUX_CONF new-session -s $selected_name -c $selected;
        exit 0;
    fi
    
    tmux -f $TMUX_CONF attach -t $selected_name;
}
