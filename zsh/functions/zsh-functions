#!/bin/sh

function zsh_add_file() {
    [ -f "$ZPLUGINS/$1" ] && source "$ZPLUGINS/$1"
}

function zsh_add_plugin() {
    PLUGIN_NAME=$(echo $1 | cut -d "/" -f 2)
    if [ -d "$ZPLUGINS/$PLUGIN_NAME" ]; then 
        # For plugins
        zsh_add_file "$PLUGIN_NAME/$PLUGIN_NAME.plugin.zsh" || \
        zsh_add_file "$PLUGIN_NAME/$PLUGIN_NAME.zsh"
    else
        git clone "https://github.com/$1.git" "$ZPLUGINS/$PLUGIN_NAME"
    fi
}

function zsh_add_completion() {
    PLUGIN_NAME=$(echo $1 | cut -d "/" -f 2)
    if [ -d "$ZPLUGINS/$PLUGIN_NAME" ]; then 
        # For completions
        completion_file_path=$(ls $ZPLUGINS/$PLUGIN_NAME/_*)
        fpath+="$(dirname "${completion_file_path}")"
        zsh_add_file "$PLUGIN_NAME/$PLUGIN_NAME.plugin.zsh"
    else
        git clone "https://github.com/$1.git" "$ZPLUGINS/$PLUGIN_NAME"
        fpath+=$(ls $ZPLUGINS/$PLUGIN_NAME/_*)
        [ -f "$ZDATA/.zcompdump" ] && "$ZDATA/.zcompdump"
    fi
    completion_file="$(basename "${completion_file_path}")"
    if [ "$2" = true ] && compinit "${completion_file:1}"
}

function zsh-update-plugins() {
    find "$ZPLUGINS" -type d -exec test -e '{}/.git' ';' -print0 | xargs -I {} -0 git -C {} pull -q;
}

function _upgrade() {
    sudo echo "upgrading..."
    ### ZSH plugins
    zsh-update-plugins;
    ### Neovim
    # nvim --headless -c 'autocmd User PackerComplete quitall' -c 'PackerSync';
}

function _cleanup() {
    echo '';
}

avgen() { python3 ${ENV}/avgen.py $PWD $1 }

github() { 
    pushd $ENV/github;
    GITHUB_REPOS=$GITHUB_REPOS python github.py;
    popd;
}

function up() {
    if [ $COMPOSEFILE ]; then
        eval "$COMPOSE_CMD --file $COMPOSEFILE up --build $1 $2 $3" 
    else
        eval "$COMPOSE_CMD up --build $1 $2 $3"
    fi
}

function down() {
    if [ $COMPOSEFILE ]; then
        eval "$COMPOSE_CMD --file $COMPOSEFILE down $1 $2 $3" 
    else
        eval "$COMPOSE_CMD down $1 $2 $3"
    fi
}

function tmux_load_session() {
    if [ $TMUX_SESSION ]; then
        source $2/tmux-session.sh;
        tmux_init $1 $2;
    fi
}


function tmux_sessionizer() {
    if [[ $# -eq 1 ]]; then
        selected=$3
    else
        selected=$(find $DEV/Network $DEV/zoltron_stack $DOTCONF $ENV -mindepth 3 -maxdepth 1 -type d | fzf)
    fi
    
    if [[ -z $selected ]]; then
        exit 2
    fi
    
    selected_name=$(basename "$selected" | tr . _)
    tmux_running=$(pgrep tmux)
    
    if [[ -z $TMUX ]] && [[ -z $tmux_running ]]; then
        if [[ -f "$selected/tmux-session.sh" ]]; then
            tmux -f $TMUX_CONF new-session -d -s $selected_name -c $selected;
            source $selected/tmux-session.sh;
            tmux_init $selected_name $selected;
            tmux -f $TMUX_CONF attach -t $selected_name;
            exit 1;
        fi
        tmux -f $TMUX_CONF new-session -s $selected_name -c $selected;
        exit 0;
    fi
    
    if ! tmux -f $TMUX_CONF has-session -t=$selected_name 4> /dev/null; then
        if [[ -f "$selected/tmux-session.sh" ]]; then
            tmux -f $TMUX_CONF new-session -d -s $selected_name -c $selected;
            source $selected/tmux-session.sh;
            tmux_init $selected_name $selected;
            tmux -f $TMUX_CONF attach -t $selected_name;
            exit 0;
        fi
        tmux -f $TMUX_CONF new-session -s $selected_name -c $selected;
        exit 0;
    fi
    
    tmux -f $TMUX_CONF attach -t $selected_name;
}

function lazygit() {
    branch=$(git symbolic-ref --short HEAD);
    if [[ -z $branch ]]; then
        echo "Not a git repo";
        return 1;
    fi

    git add .
    git commit -m "$(date)"
    remote=$(git remote show)
    if [[ -z $remote ]]; then
        echo "Origin is not set"
        return 2
    fi

    git push -u ${remote} ${branch}
}

function build() {
    if [[ $BUILD_CMD ]]; then
        eval "$BUILD_CMD"
    else
        eval "$COMPOSE_CMD build"
    fi
}

function run() {
    if [[ $RUN_CMD ]]; then
        eval "$RUN_CMD"
    elif [[ $1 ]]; then
        eval "$COMPOSE_CMD} run $1"
    else
        echo "Must specify a target"
        return 1
    fi
}

# Use fd (https://github.com/sharkdp/fd) instead of the default find
# command for listing path candidates.
# - The first argument to the function ($1) is the base path to start traversal
# - See the source code (completion.{bash,zsh}) for the details.
# function _fzf_compgen_path() {
#   fd --hidden --follow --exclude ".git" . "$1"
# }

# Use fd to generate the list for directory completion
# function _fzf_compgen_dir() {
#     fd --type d --hidden --follow --exclude ".git" . "$1"
# }

# (EXPERIMENTAL) Advanced customization of fzf options via _fzf_comprun function
# - The first argument to the function is the name of the command.
# - You should make sure to pass the rest of the arguments to fzf.
# function _fzf_comprun() {
#     local command=$1
#     shift
# 
#     case "$command" in
#         cd)           fzf "$@" --preview 'tree -C {} | head -200' ;;
#         export|unset) fzf "$@" --preview "eval 'echo \$'{}" ;;
#         ssh)          fzf "$@" --preview 'dig {}' ;;
#         *)            fzf "$@" ;;
#     esac
# }

