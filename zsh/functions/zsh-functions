#!/bin/sh

source $ZFUNCTIONS/helpers.sh
source $ZFUNCTIONS/cleanup.sh
source $ZFUNCTIONS/upgrade.sh

zsh_add_file() {
    [ -f "$ZPLUGINS/$1" ] && source "$ZPLUGINS/$1"
}

zsh_add_plugin() {
    PLUGIN_NAME=$(echo $1 | cut -d "/" -f 2)
    if [ -d "$ZPLUGINS/$PLUGIN_NAME" ]; then 
        # For plugins
        zsh_add_file "$PLUGIN_NAME/$PLUGIN_NAME.plugin.zsh" || \
        zsh_add_file "$PLUGIN_NAME/$PLUGIN_NAME.zsh"
    else
        git clone --depth 1 "https://github.com/$1.git" "$ZPLUGINS/$PLUGIN_NAME"
    fi
}

zsh_add_completion() {
    PLUGIN_NAME=$(echo $1 | cut -d "/" -f 2)
    if [ -d "$ZPLUGINS/$PLUGIN_NAME" ]; then 
        # For completions
        completion_file_path=$(ls $ZPLUGINS/$PLUGIN_NAME/_*)
        fpath+="$(dirname "${completion_file_path}")"
        zsh_add_file "$PLUGIN_NAME/$PLUGIN_NAME.plugin.zsh"
    else
        git clone "https://github.com/$1.git" "$ZPLUGINS/$PLUGIN_NAME"
        fpath+=$(ls $ZPLUGINS/$PLUGIN_NAME/_*)
        [ -f "$ZDATA/.zcompdump" ] && "$ZDATA/.zcompdump"
    fi
    completion_file="$(basename "${completion_file_path}")"
    if [ "$2" = true ] && compinit "${completion_file:1}"
}

_upgrade() {
    sudo echo "upgrading..."
    _upgrade_zsh_plugins
    _upgrade_python_packages
    _upgrade_npm_packages
}

_cleanup() {
    sudo echo "cleaning up"
    _cleanup_docker
    _cleanup_python
    _cleanup_cargo
    _cleanup_npm
}

github() { 
    pushd $ENV/github;
    GITHUB_REPOS=$GITHUB_REPOS python github.py;
    popd;
}

up() {
    if [ $COMPOSEFILE ]; then
        eval "$COMPOSE_CMD --file $COMPOSEFILE up --build $1 $2 $3" 
    else
        eval "$COMPOSE_CMD up --build $1 $2 $3"
    fi
}

down() {
    if [ $COMPOSEFILE ]; then
        eval "$COMPOSE_CMD --file $COMPOSEFILE down $1 $2 $3" 
    else
        eval "$COMPOSE_CMD down $1 $2 $3"
    fi
}

build() {
    if [[ $BUILD_CMD ]]; then
        eval "$BUILD_CMD $*"
    else
        eval "$COMPOSE_CMD build $*"
    fi
}

run() {
    if [[ $RUN_CMD ]]; then
        eval "$RUN_CMD $*"
    elif [[ $1 ]]; then
        eval "$COMPOSE_CMD run $*"
    else
        echo "Must specify a target"
        return 1
    fi
}

rebuild-font-cache() {
    fc-cache -f -v
}

my-backward-delete-word() {
    local WORDCHARS=${WORDCHARS/\//}
    zle backward-delete-word
}

cmake_inspect() {
    if [ ! -f ./CMakeLists.txt ]; then
        echo "CMakeLists not found"
        return 1
    fi
    if [ -d ./build ]; then
        rm -rf ./build
    fi
    mkdir build && cd build || return 1
    cmake ..
    cmake -LA | awk '{if(f)print} /-- Cache values/{f=1}'
}
