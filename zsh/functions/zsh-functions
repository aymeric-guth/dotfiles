#!/bin/sh

source $ZFUNCTIONS/helpers.sh
source $ZFUNCTIONS/cleanup.sh
source $ZFUNCTIONS/upgrade.sh

function zsh_add_file() {
    [ -f "$ZPLUGINS/$1" ] && source "$ZPLUGINS/$1"
}

function zsh_add_plugin() {
    PLUGIN_NAME=$(echo $1 | cut -d "/" -f 2)
    if [ -d "$ZPLUGINS/$PLUGIN_NAME" ]; then 
        # For plugins
        zsh_add_file "$PLUGIN_NAME/$PLUGIN_NAME.plugin.zsh" || \
        zsh_add_file "$PLUGIN_NAME/$PLUGIN_NAME.zsh"
    else
        git clone --depth 1 "https://github.com/$1.git" "$ZPLUGINS/$PLUGIN_NAME"
    fi
}

function zsh_add_completion() {
    PLUGIN_NAME=$(echo $1 | cut -d "/" -f 2)
    if [ -d "$ZPLUGINS/$PLUGIN_NAME" ]; then 
        # For completions
        completion_file_path=$(ls $ZPLUGINS/$PLUGIN_NAME/_*)
        fpath+="$(dirname "${completion_file_path}")"
        zsh_add_file "$PLUGIN_NAME/$PLUGIN_NAME.plugin.zsh"
    else
        git clone "https://github.com/$1.git" "$ZPLUGINS/$PLUGIN_NAME"
        fpath+=$(ls $ZPLUGINS/$PLUGIN_NAME/_*)
        [ -f "$ZDATA/.zcompdump" ] && "$ZDATA/.zcompdump"
    fi
    completion_file="$(basename "${completion_file_path}")"
    if [ "$2" = true ] && compinit "${completion_file:1}"
}

function zsh-update-plugins() {
    find "$ZPLUGINS" -type d -exec test -e '{}/.git' ';' -print0 | xargs -I {} -0 git -C {} pull -q;
}

function _upgrade() {
    sudo echo "upgrading..."
    ### ZSH plugins
    zsh-update-plugins;
    ### Neovim
    # nvim --headless -c 'autocmd User PackerComplete quitall' -c 'PackerSync';
    ### PIP, Python3 global packages
    python3 -m pip install --upgrade pip;
    python3 -m pip uninstall -y -r <(python3 -m pip freeze --user);
    python3 -m pip install -r $DOTFILES/requirements.txt;
}

function _cleanup() {
    echo '';
}

avgen() { python3 ${ENV}/avgen.py $PWD $1 }

github() { 
    pushd $ENV/github;
    GITHUB_REPOS=$GITHUB_REPOS python github.py;
    popd;
}

function up() {
    if [ $COMPOSEFILE ]; then
        eval "$COMPOSE_CMD --file $COMPOSEFILE up --build $1 $2 $3" 
    else
        eval "$COMPOSE_CMD up --build $1 $2 $3"
    fi
}

function down() {
    if [ $COMPOSEFILE ]; then
        eval "$COMPOSE_CMD --file $COMPOSEFILE down $1 $2 $3" 
    else
        eval "$COMPOSE_CMD down $1 $2 $3"
    fi
}

function lazygit() {
    branch=$(git symbolic-ref --short HEAD);
    if [[ -z $branch ]]; then
        echo "Not a git repo";
        return 1;
    fi

    git add .
    git commit -m "$(date)"
    remote=$(git remote show)
    if [[ -z $remote ]]; then
        echo "Origin is not set"
        return 2
    fi

    git push -u ${remote} ${branch}
}

function build() {
    if [[ $BUILD_CMD ]]; then
        eval "$BUILD_CMD"
    else
        eval "$COMPOSE_CMD build"
    fi
}

function run() {
    if [[ $RUN_CMD ]]; then
        eval "$RUN_CMD"
    elif [[ $1 ]]; then
        eval "$COMPOSE_CMD} run $1"
    else
        echo "Must specify a target"
        return 1
    fi
}

rebuild-font-cache() {
    fc-cache -f -v
}

my-backward-delete-word() {
    local WORDCHARS=${WORDCHARS/\//}
    zle backward-delete-word
}
