#!/bin/sh

. "$ZDOTDIR/func/cleanup.sh"
. "$ZDOTDIR/func/upgrade.sh"
[ -n "$FRE" ] && . "$ZDOTDIR/func/_fre.sh"
. "$ZDOTDIR/func/_syncthing.sh"
. "$ZDOTDIR/func/_starters.sh"
. "$ZDOTDIR"/func/aws.sh


up() {
    if [ $COMPOSEFILE ]; then
        eval "$COMPOSE_CMD --file $COMPOSEFILE up --build $1 $2 $3" 
    else
        eval "$COMPOSE_CMD up --build $1 $2 $3"
    fi
}

down() {
    if [ $COMPOSEFILE ]; then
        eval "$COMPOSE_CMD --file $COMPOSEFILE down $1 $2 $3" 
    else
        eval "$COMPOSE_CMD down $1 $2 $3"
    fi
}

build() {
    eval "$COMPOSE_CMD build $*"
}

run() {
    if [[ $RUN_CMD ]]; then
        eval "$RUN_CMD $*"
    elif [[ $1 ]]; then
        eval "$COMPOSE_CMD run $*"
    else
        echo "Must specify a target"
        return 1
    fi
}

cmake_inspect() {
    if [ ! -f ./CMakeLists.txt ]; then
        echo "CMakeLists not found"
        return 1
    fi
    if [ -d ./build ]; then
        rm -rf ./build
    fi
    mkdir build && cd build || return 1
    cmake ..
    cmake -LA | awk '{if(f)print} /-- Cache values/{f=1}'
}

hostmapping() {
    case "$(hostname)" in
        eihwaz)
            print '\U16D6'
            ;;
        *)
            print '%m'
            ;;
    esac
}

# s() {
#     if git-is-repo "$(pwd)"; then
#         return "$(git status --porcelain=v1 2>/dev/null | wc -l)"
#     else
#         return 1
#     fi
# }

k3s-agent-start() {
    [ -f /etc/systemd/system/k3s-agent.service ] && systemctl start k3s-agent.service
}

k3s-agent-stop() {
    [ -f /etc/systemd/system/k3s-agent.service ] && systemctl stop k3s-agent.service
    _cleanup_docker
}

k3s-master-start() {
    [ -f /etc/systemd/system/k3s.service ] && systemctl start k3s.service
}

k3s-master-stop() {
    [ -f /etc/systemd/system/k3s.service ] && systemctl stop k3s.service
    _cleanup_docker
}

hex() {
  filename=$(resolve_path "$1")
  [ ! -f "$filename" ] && return 1
  /Applications/imhex.app/Contents/MacOS/imhex "$filename" &
}

my-zsh-prof() {
  for i in $(seq 1 10); do /usr/bin/time $(which zsh) -i -c exit; done;
}

swap() {
    local TMPFILE=tmp.$$
    mv "$1" $TMPFILE && mv "$2" "$1" && mv $TMPFILE "$2"
}

# create a do-ls function
# Make sure to use emulate -L zsh or
# your shell settings and a directory
# named 'rm' could be deadly
# https://github.com/rothgar/mastering-zsh/blob/master/docs/config/hooks.md
do-ls() {
    emulate -L zsh
    lsd -la
}

autols-enable() {
    add-zsh-hook chpwd do-ls
}

# https://stackoverflow.com/questions/42109673/how-to-remove-a-z-shell-precmd-function
autols-disable() {
    add-zsh-hook -d chpwd do-ls
}

